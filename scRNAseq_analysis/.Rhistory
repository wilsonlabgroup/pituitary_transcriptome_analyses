labs(y = "Proportion of cells", x = "# cells sampled", title = "Xist vs sum(chrY)") +
theme_light()
g
ggsave("output/sex_test_proportion_xist_vs_sum_chrY_bar.pdf", g, width = 6, height = 8)
#+ new_plot_celltype_aware, fig.width = 6, fig.height = 8, fig.cap = "Proportion of cells correctly assigned sex (separated by cell type); female: Xist > sum(chrY)."
new_sex_plot_sum_cell <- new_sex_plot %>%
group_by(num_cells, celltype) %>%
dplyr::count(check) %>%
mutate(num_cells = as.numeric(gsub("n_", "", num_cells))) %>%
arrange(num_cells)
new_sex_plot_sum_cell$num_cells <- factor(new_sex_plot_sum_cell$num_cells)
new_sex_plot_sum_cell$check <- factor(new_sex_plot_sum_cell$check,
levels = c(TRUE,
FALSE,
NA))
g1 <- ggplot(new_sex_plot_sum_cell, aes(x = num_cells, y = n, fill = check)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(breaks = seq(0,1,0.1)) +
# scale_x_continuous(breaks = unique(sex_plot_prop$num_cells)) +
facet_wrap(.~celltype)+
# geom_text(label = sex_plot_sum$n) +
labs(y = "Proportion of cells", x = "# cells sampled", title = "Xist vs sum(chrY)") +
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
g1
ggsave("output/sex_test_proportion_celltype_xist_vs_sum_chrY_bar.pdf", g1, width = 6, height = 8)
#' ## Investigate NAs
#' Although proportion of "FALSE" called is decreased, there is still ~20% called NA.
#' Is this due to 0 expression in these genes for these NA cells?
#+ check_nas
na_sex <- lapply(new_test_sex, function(x) filter(x, is.na(check)))
names(na_sex) <- names(new_test_sex)
na_countlist <- lapply(names(na_sex), function(x) check_na(na_sex[[x]], x))
names(na_countlist) <- names(na_sex)
lapply(na_countlist, function(x) sum(x$sum_expr))
View(na_countlist[[6]])
View(na_countlist[[8]])
setwd("~/Dropbox (Wilson Lab)/wilson_lab/active_manuscripts/pituitary_paper/RC_revision/revision_figures/coexpression_kstest")
library(dplyr)
library(Seurat)
library(knitr)
# library(biomaRt)
# library(igraph)
# library(ggraph)
# library(intergraph)
# library(rowr)
library(scales)
library(EDASeq)
library(pheatmap)
library(LaCroixColoR)
library(grid)
library(plyr)
# library(ggpubr)
library(reshape2)
library(ggplot2)
library(colorspace)
library(ggrepel)
# library(openxlsx)
source("ruf_integrated_kstest_2022-05-17_functions_rmd_ver.R")
#' ## Load in integrated dataset
#+ load_data, warning = F, message = F
#### Load in scRNA-seq data ####
ruf <- readRDS("input/20211214_ruf_2021_pit_GSE151961_integrated_seurat.rds")
# Group cell-types
int_simple_celltypes <-
c(Lactotropes = "Lactotropes",
Somatotropes_1 = "Somatotropes",
Somatotropes_2 = "Somatotropes",
Melanotropes = "Melanotropes",
`Somato/Lacto` = "Somato_Lacto",
Gonadotropes = "Gonadotropes",
`Stem-cell_1` = "Stem_cell",
`Stem-cell_2` = "Stem_cell",
Corticotropes = "Corticotropes",
Proliferating = "Proliferating",
Thryotropes = "Thyrotropes",
Pericytes = "Pericytes",
Endothelial = "Endothelial", #Meis2/Plvap
`Pituicytes (posterior)` = "Pituicytes",
Debris = "Debris", #
Macrophages = "Macrophages"
)
ruf$man_clusters <- Idents(ruf)
ruf <- RenameIdents(ruf, int_simple_celltypes)
ruf$int_clusters <- factor(ruf@active.ident,
levels = list(Somatotropes = "Somatotropes",
Lactotropes = "Lactotropes",
Corticotropes = "Corticotropes",
Gonadotropes = "Gonadotropes",
Stem_cell = "Stem_cell",
Endothelial = "Endothelial",
Proliferating = "Proliferating",
Melanotropes = "Melanotropes",
Pericytes = "Pericytes",
Macrophages = "Macrophages",
Pituicytes = "Pituicytes",
Thyrotropes = "Thyrotropes",
`Somato/Lacto` = "Somato_Lacto",
Debris = "Debris"))
Idents(ruf) <- ruf$int_clusters
ruf <- subset(ruf, idents = "Debris", invert = T)
clusters <- factor(ruf$int_clusters, levels = levels(ruf$int_clusters)[1:length(levels(ruf$int_clusters))-1])
mod_utr <- readRDS("input/coexpression_modules_202205.rds")
mod_utr$modules <- factor(mod_utr$modules)
celltypes <- levels(clusters)
# Create colour palette for heatmap annotation of cell types
ggcolours <- hue_pal()(length(celltypes))
names(ggcolours) <- celltypes
#' ## Run KS test for combined cell clusters
#' KS test is run and FDR is calculated for each module gene in for combined cell clusters.
#' Genes with enriched with FC > 0, FDR adj < 0.05 in at least one cell type compared to all other cell types are retained.
#' Heatmap is plotted with FDR value for each module gene retained in each cell type.
#+ run_ks_test, warning = F, message = F
#Run KS test and calculate FDR for each module gene
ks_res <- lapply(levels(mod_utr$modules), function(x) calc_stat_test(mod_utr[mod_utr$modules == x, "genename"], "ks", ruf, clusters))
ks_respval <- lapply(ks_res, function(x) na.exclude(x[["pval"]]))
num_comparisons <- sum(unlist(lapply(ks_respval, function(x) print(as.numeric(dim(x)[1]) * as.numeric(dim(x)[2])))))
#Calculate FDR adjusted pvalue and filter for minimum FDR adj < 0.05 in each row
ks_resfdr <- lapply(ks_respval, function(x) matrix(p.adjust(as.matrix(x), method = "fdr", n = sum(num_comparisons)), nrow = nrow(x), ncol = ncol(x), dimnames = dimnames(x)))
ks_fdrcut <- lapply(ks_resfdr, function(x) x[rowMin(x) <= 0.05, ])
#Filter FC calculated so that only genes with FC > 0 in at least one comparison is included
ks_fc <- lapply(ks_res, function(x) na.exclude(x[["FC"]]))
names(ks_fdrcut) <- names(ks_fc) <- paste0("M", 1:9)
ks_fccut <- lapply(names(ks_fc), function(x) ks_fc[[x]][rownames(ks_fc[[x]]) %in% rownames(ks_fdrcut[[x]]), ])
ks_fccut <- lapply(ks_fccut, function(x) x[abs(rowSums(x)) > 0, ])
#Combine FDR df from all modules into one df
all_ks <- bind_rows(lapply(ks_fdrcut, function(x) as.data.frame(cbind("gene" = rownames(x), x))))
rownames(all_ks) <- all_ks$gene
all_ks <- all_ks[, -1]
gene_names <- rownames(all_ks)
all_ks <- sapply(all_ks, function(x) as.numeric(as.character(x)))
rownames(all_ks) <- gene_names
#Annotate each gene to corresponding module
anno_row <- bind_rows(lapply(names(ks_fdrcut), function(x) as.data.frame(cbind("gene" = rownames(ks_fdrcut[[x]]), "module" = x) )))
rownames(anno_row) <- anno_row$gene
anno_col <- list(celltypes = ggcolours)
#Calculate breaks in heatmap based on modules
indices <- sapply(ks_fdrcut, nrow)
for(i in 2:length(indices)) {
x <- as.numeric(indices[i])
indices[i] <- as.numeric(indices[i - 1]) + as.numeric(indices[i])
}
View(all_ks)
cell_anno <- as.data.frame(celltypes)
rownames(cell_anno) <- cell_anno$celltypes
use_breaks <- get_htmap_breaks(all_ks)
ks_org <- lapply(1:length(indices), function(x) reorg_ks(x, all_ks))
View(ks_org)
View(ks_org[[7]]$Proliferating)
(ks_org[[7]]$Proliferating)
(ks_org[[7]]$Proliferating < 0.05)
(which(ks_org[[7]]$Proliferating < 0.05))
length(which(ks_org[[7]]$Proliferating < 0.05))
#+ num_enrich
length(which(ks_org[[7]]$Proliferating < 0.05))
#+ num_enrich
print(paste0(length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating)))
#+ num_enrich
print(paste0("M7: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating)))
View(mod_utr)
table(mod_utr$modules)
print(paste0("M2: ", length(which(ks_org[[2]]$Somatotropes < 0.05)), "/", length(ks_org[[2]]$Somatotropes)))
print(paste0("M2 in Somatotropes: ", length(which(ks_org[[5]]$Somatotropes < 0.05)), "/", length(ks_org[[5]]$Somatotropes)))
print(paste0("M3 in Lactotropes: ", length(which(ks_org[[3]]$Lactotropes < 0.05)), "/", length(ks_org[[3]]$Lactotropes)))
print(paste0("M8 in Pituicytes: ", length(which(ks_org[[8]]$Pituicytes < 0.05)), "/", length(ks_org[[8]]$Pituicytes)))
table(mod_utr$modules)[7]
print(paste0("M7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating, "of ", table(mod_utr$modules)[7], " genes")))
print(paste0("M7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating, "of ", table(mod_utr$modules)[[7]], " genes")))
table(mod_utr$modules)[[7]]
print(paste0("M7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating), "of ", table(mod_utr$modules)[[7]], " genes"))
print(paste0("M7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating), " of ", table(mod_utr$modules)[[M7]], " genes"))
print(paste0("M7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating), " of ", table(mod_utr$modules)[["M7"]], " genes"))
print(paste0("M", 7 in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating), " of ", table(mod_utr$modules)[[7]], " genes"))
print(paste0("M2 in Somatotropes: ", length(which(ks_org[[2]]$Somatotropes < 0.05)), "/", length(ks_org[[2]]$Somatotropes)))
print(paste0("M2 in Somatotropes: ", length(which(ks_org[[5]]$Somatotropes < 0.05)), "/", length(ks_org[[5]]$Somatotropes)))
print(paste0("M3 in Lactotropes: ", length(which(ks_org[[3]]$Lactotropes < 0.05)), "/", length(ks_org[[3]]$Lactotropes)))
print(paste0("M8 in Pituicytes: ", length(which(ks_org[[8]]$Pituicytes < 0.05)), "/", length(ks_org[[8]]$Pituicytes)))
#+ ks_heatmap_all_clusters, warning = F, message = F, width = 8, height = 10, fig.cap = "Heatmap showing enrichment of module genes in cell-types based on FDR-adjusted P-values from a KS test."
p <- pheatmap(ks_org_df,
# border_color = "black",
color = colorRampPalette(c("darkmagenta", "snow2"))(250),
annotation_col = cell_anno[, 1, drop = F],
cluster_rows = F,
cluster_cols = F,
# scale = "row",
annotation_colors = anno_col,
gaps_row = indices,
show_rownames = F,
labels_col = paste(cell_anno$cluster, cell_anno$celltype)
# breaks = use_breaks2,
)
save_phtmap_pdf(p, "output/pit_utr_module_cheung_scrna_ks_FDR_cellenrichment_no_debris.pdf", 8, 10)
print(p)
tmp <- dev.off()
#+ add_genelabels, warning = F, message = F, width = 8, height = 10, fig.cap = "Heatmap with top 5 hub genes labelled showing enrichment of module genes in cell-types based on FDR-adjusted P-values from a KS test."
hub_genes <- readRDS("input/top10_hub_genes_202205.rds")
hub_genes <- melt(apply(hub_genes, 1, function(x) unlist(strsplit(x, ",")))[1:5,])
anno_row <- mutate(anno_row, gene = ifelse(gene %in% hub_genes$value, paste0("----", gene), ""))
p <- pheatmap(ks_org_df,
# border_color = "black",
color = colorRampPalette(c("darkmagenta", "snow2"))(250),
annotation_col = cell_anno[, 1, drop = F],
cluster_rows = F,
cluster_cols = F,
# scale = "row",
annotation_colors = anno_col,
gaps_row = indices,
# show_rownames = F,
labels_col = paste(cell_anno$cluster, cell_anno$celltype),
labels_row = anno_row$gene
# breaks = use_breaks2,
)
save_phtmap_pdf(p, "output/pit_utr_module_cheung_scrna_ks_FDR_cellenrichment_no_debris_top5_label.pdf", 8, 10)
print(p)
tmp <- dev.off()
#' ## R Session Info
#+ r_session, message = F, warning = F
sessionInfo()
print(paste0("M", 7, "in Proliferating: ", length(which(ks_org[[7]]$Proliferating < 0.05)), "/", length(ks_org[[7]]$Proliferating), " of ", table(mod_utr$modules)[[7]], " genes"))
length(ks_org)
module_num <- 7
1:length(ks_org[[module_num]])
i <- 7
celltype <- names(1:length(ks_org[[module_num]]))[i]
names((ks_org[[module_num]]))[i]
celltype <- names(ks_org[[module_num]])[i]
print(paste0("M", module_num, " in ", celltype, ": ",
length(which(ks_org[[module_num]][[i]] < 0.05)), "/",
length(ks_org[[module_num]][[i]]),
" of ", table(mod_utr$modules)[[module_num]], " genes"))
num_enrich <- function(module_num) {
for(i in 1:length(ks_org[[module_num]])) {
celltype <- names(ks_org[[module_num]])[i]
print(paste0("M", module_num, " in ", celltype, ": ",
length(which(ks_org[[module_num]][[i]] < 0.05)), "/",
length(ks_org[[module_num]][[i]]),
" of ", table(mod_utr$modules)[[module_num]], " genes"))
}
}
#+ num_enrich
lapply(1:length(ks_org), function(x) num_enrich(x))
num_enrich <- function(module_num) {
print("\n")
for(i in 1:length(ks_org[[module_num]])) {
celltype <- names(ks_org[[module_num]])[i]
print(paste0("M", module_num, " in ", celltype, ": ",
length(which(ks_org[[module_num]][[i]] < 0.05)), "/",
length(ks_org[[module_num]][[i]]),
" of ", table(mod_utr$modules)[[module_num]], " genes"))
}
}
#+ num_enrich
lapply(1:length(ks_org), function(x) num_enrich(x))
num_enrich <- function(module_num) {
print(" ")
for(i in 1:length(ks_org[[module_num]])) {
celltype <- names(ks_org[[module_num]])[i]
print(paste0("M", module_num, " in ", celltype, ": ",
length(which(ks_org[[module_num]][[i]] < 0.05)), "/",
length(ks_org[[module_num]][[i]]),
" of ", table(mod_utr$modules)[[module_num]], " genes"))
}
}
#+ num_enrich
lapply(1:length(ks_org), function(x) num_enrich(x))
#+ num_enrich
sapply(1:length(ks_org), function(x) num_enrich(x))
knitr::spin("ruf_integrated_kstest_2022-05-30_rmd_ver.R", knit = F, format = "Rmd")
knitr::spin("ruf_integrated_kstest_2022-05-30_rmd_ver.R", knit = F, format = "Rmd")
knitr::spin("ruf_integrated_kstest_2022-05-30_rmd_ver.R", knit = F, format = "Rmd")
setwd("~/Documents/GitHub/pituitary_transcriptome_analyses/scRNAseq_analysis")
#' ## Libraries
#+ libraries
library(scMappR)
library(Seurat)
library(ggplot2)
library(ggpubr)
library(reshape)
library(dplyr)
library(knitr)
library(WGCNA)
library(colorspace)
library(scales)
source("decon_compare_functions.R")
#' ## Determine reference cell-type proportions
#' Load and save scRNA-seq cell-type proportions as a reference dataset.
#' This dataset was integrated using the script located at:
#' ~/⁨Dropbox (Wilson Lab)⁩/⁨Mike_Anna_Mark⁩/active_manuscript⁩/Pituitary paper⁩/scripts⁩/⁨single_cell_rmd⁩/20211214_integrated_process_ruf_snrnaseq.R
#+ load_scrna
dir.create("output/ruf_integrate")
ruf <- readRDS("input/20211214_ruf_2021_pit_GSE151961_integrated_seurat.rds")
int_simple_celltypes <-
c(Lactotropes = "Lactotropes",
Somatotropes_1 = "Somatotropes",
Somatotropes_2 = "Somatotropes",
Melanotropes = "Melanotropes",
`Somato/Lacto` = "Somato_Lacto",
Gonadotropes = "Gonadotropes",
`Stem-cell_1` = "Stem_cell",
`Stem-cell_2` = "Stem_cell",
Corticotropes = "Corticotropes",
Proliferating = "Proliferating",
Thryotropes = "Thyrotropes",
Pericytes = "Pericytes",
Endothelial = "Endothelial", #Meis2/Plvap
`Pituicytes (posterior)` = "Pituicytes",
Debris = "Debris", #
Macrophages = "Macrophages"
)
ruf$man_clusters <- Idents(ruf)
ruf <- RenameIdents(ruf, int_simple_celltypes)
ruf$int_clusters <- factor(ruf@active.ident,
levels = list(Somatotropes = "Somatotropes",
Lactotropes = "Lactotropes",
Corticotropes = "Corticotropes",
Gonadotropes = "Gonadotropes",
Stem_cell = "Stem_cell",
Endothelial = "Endothelial",
Proliferating = "Proliferating",
Melanotropes = "Melanotropes",
Pericytes = "Pericytes",
Macrophages = "Macrophages",
Pituicytes = "Pituicytes",
Thyrotropes = "Thyrotropes",
`Somato/Lacto` = "Somato_Lacto",
Debris = "Debris"))
Idents(ruf) <- ruf$int_clusters
p1 <- DimPlot(ruf, reduction = "umap", group.by = "sex")
p2 <- DimPlot(ruf, reduction = "umap", group.by = "int_clusters", label = T, repel = T)
p1 + p2
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_simple_labelled.pdf", width = 20, height = 10,
useDingbats = F)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_simple_labelled.png", width = 20, height = 10)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_cluster_only.pdf", p2, width = 10, height = 10,
useDingbats = F)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_cluster_only.png", p2, width = 10, height = 10)
markers.to.plot <- c("Gh", "Ghrhr", "Dlk1", "Prl", "Lhb", "Fshb", "Tshb", "Pomc", "Crhr1", "Pax7",
"Oacyl", "Sox2", "Rbpms", "Pou1f1", "Top2a", "Mki67", "Plvap",
"Meis2", "Emcn", "Dcn", "Lama2", "C1qa", "Ctss", "Scn7a", "Col25a1", "Sgcz")
DotPlot(ruf,
# assay = "SCT",
features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "sex") +
RotatedAxis()
ggsave("output/ruf_integrate/ruf_integrated_dotplot_markers.pdf", width = 10, height = 10)
neuron_genes <- read.table("input/neuron_part_genes.txt", header = F)
DotPlot(pit,
assay = "SCT",
features = neuron_genes$V1, cols = c("tomato", "steelblue"), dot.scale = 8, split.by = "sex") +
# coord_flip() +
RotatedAxis()
ggsave("output/ruf_integrate/ruf_integrated_dotplot_neuron_genes_sct.pdf", width = 16, height = 10)
ggsave("output/ruf_integrate/ruf_integrated_dotplot_neuron_genes_sct.png", width = 16, height = 10)
# Use integrated data for deconvolution
# Get average proportions from scRNA-seq data for each dataset
pit <- ruf
rm(ruf)
pit <- subset(pit, idents = "Debris", invert = T) # remove debris cluster
ruf_F <- pit[,(pit$sex == "F")]
ruf_M <- pit[,(pit$sex == "M")]
total_cells_scRNA <- table(Idents(pit))
total_cells_F <- table(Idents(ruf_F))
total_cells_M <- table(Idents(ruf_M))
props_scRNA <- total_cells_scRNA/sum(total_cells_scRNA)
props_scRNA_F <- total_cells_F/sum(total_cells_F)
props_scRNA_M <- total_cells_M/sum(total_cells_M)
rm(list=c("ruf_F","ruf_M"))
#' ## Determine reference cell-type proportions
#' Load and save scRNA-seq cell-type proportions as a reference dataset.
#' This dataset was integrated using the script located at:
#' ~/⁨Dropbox (Wilson Lab)⁩/⁨Mike_Anna_Mark⁩/active_manuscript⁩/Pituitary paper⁩/scripts⁩/⁨single_cell_rmd⁩/20211214_integrated_process_ruf_snrnaseq.R
#+ load_scrna
dir.create("output/ruf_integrate", recursive = T)
ruf <- readRDS("~/Dropbox (Wilson Lab)/Mike_Anna_Mark/active_manuscript/Pituitary paper/scripts/single_cell_rmd/GSE151961_RAW/output/20211214_ruf_2021_pit_GSE151961_integrated_seurat.rds")
int_simple_celltypes <-
c(Lactotropes = "Lactotropes",
Somatotropes_1 = "Somatotropes",
Somatotropes_2 = "Somatotropes",
Melanotropes = "Melanotropes",
`Somato/Lacto` = "Somato_Lacto",
Gonadotropes = "Gonadotropes",
`Stem-cell_1` = "Stem_cell",
`Stem-cell_2` = "Stem_cell",
Corticotropes = "Corticotropes",
Proliferating = "Proliferating",
Thryotropes = "Thyrotropes",
Pericytes = "Pericytes",
Endothelial = "Endothelial", #Meis2/Plvap
`Pituicytes (posterior)` = "Pituicytes",
Debris = "Debris", #
Macrophages = "Macrophages"
)
ruf$man_clusters <- Idents(ruf)
ruf <- RenameIdents(ruf, int_simple_celltypes)
ruf$int_clusters <- factor(ruf@active.ident,
levels = list(Somatotropes = "Somatotropes",
Lactotropes = "Lactotropes",
Corticotropes = "Corticotropes",
Gonadotropes = "Gonadotropes",
Stem_cell = "Stem_cell",
Endothelial = "Endothelial",
Proliferating = "Proliferating",
Melanotropes = "Melanotropes",
Pericytes = "Pericytes",
Macrophages = "Macrophages",
Pituicytes = "Pituicytes",
Thyrotropes = "Thyrotropes",
`Somato/Lacto` = "Somato_Lacto",
Debris = "Debris"))
Idents(ruf) <- ruf$int_clusters
p1 <- DimPlot(ruf, reduction = "umap", group.by = "sex")
p2 <- DimPlot(ruf, reduction = "umap", group.by = "int_clusters", label = T, repel = T)
p1 + p2
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_simple_labelled.pdf", width = 20, height = 10,
useDingbats = F)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_simple_labelled.png", width = 20, height = 10)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_cluster_only.pdf", p2, width = 10, height = 10,
useDingbats = F)
ggsave("output/ruf_integrate/20220315_integrated_umap_clusters_cluster_only.png", p2, width = 10, height = 10)
markers.to.plot <- c("Gh", "Ghrhr", "Dlk1", "Prl", "Lhb", "Fshb", "Tshb", "Pomc", "Crhr1", "Pax7",
"Oacyl", "Sox2", "Rbpms", "Pou1f1", "Top2a", "Mki67", "Plvap",
"Meis2", "Emcn", "Dcn", "Lama2", "C1qa", "Ctss", "Scn7a", "Col25a1", "Sgcz")
DotPlot(ruf,
# assay = "SCT",
features = markers.to.plot, cols = c("blue", "red"), dot.scale = 8, split.by = "sex") +
RotatedAxis()
ggsave("output/ruf_integrate/ruf_integrated_dotplot_markers.pdf", width = 10, height = 10)
neuron_genes <- read.table("input/neuron_part_genes.txt", header = F)
DotPlot(pit,
assay = "SCT",
features = neuron_genes$V1, cols = c("tomato", "steelblue"), dot.scale = 8, split.by = "sex") +
# coord_flip() +
RotatedAxis()
ggsave("output/ruf_integrate/ruf_integrated_dotplot_neuron_genes_sct.pdf", width = 16, height = 10)
ggsave("output/ruf_integrate/ruf_integrated_dotplot_neuron_genes_sct.png", width = 16, height = 10)
# Use integrated data for deconvolution
# Get average proportions from scRNA-seq data for each dataset
pit <- ruf
rm(ruf)
pit <- subset(pit, idents = "Debris", invert = T) # remove debris cluster
ruf_F <- pit[,(pit$sex == "F")]
ruf_M <- pit[,(pit$sex == "M")]
total_cells_scRNA <- table(Idents(pit))
total_cells_F <- table(Idents(ruf_F))
total_cells_M <- table(Idents(ruf_M))
props_scRNA <- total_cells_scRNA/sum(total_cells_scRNA)
props_scRNA_F <- total_cells_F/sum(total_cells_F)
props_scRNA_M <- total_cells_M/sum(total_cells_M)
rm(list=c("ruf_F","ruf_M"))
pit_utr <- readRDS("input/pit_utr_2019__RUV_k2_set1_2019-07-03.rds")
pit_norm <- normCounts(pit_utr)
pit_markers_sct <- FindAllMarkers(pit, assay = "SCT", only.pos = F, recorrect_umi = F)
gene_res <- lapply(levels(pit_markers_sct$cluster), function(x) pit_markers_sct[pit_markers_sct$cluster == x, ])
names(gene_res) <- levels(pit_markers_sct$cluster)
gene_res <- lapply(gene_res, function(x) {rownames(x) <- as.character(x$gene); x})
gene_res <- lapply(gene_res, function(x) x[, c(5, 2)])
wilcoxon_scmappr <- generes_to_heatmap(gene_res, species = "mouse", make_names = F)
kable(head(wilcoxon_scmappr$OR), caption = "Example gene OR in signature matrix.")
library(EDASeq)
library(EDASeq)
pit_norm <- normCounts(pit_utr)
gene_res <- lapply(levels(pit_markers_sct$cluster), function(x) pit_markers_sct[pit_markers_sct$cluster == x, ])
names(gene_res) <- levels(pit_markers_sct$cluster)
gene_res <- lapply(gene_res, function(x) {rownames(x) <- as.character(x$gene); x})
gene_res <- lapply(gene_res, function(x) x[, c(5, 2)])
wilcoxon_scmappr <- generes_to_heatmap(gene_res, species = "mouse", make_names = F)
kable(head(wilcoxon_scmappr$OR), caption = "Example gene OR in signature matrix.")
HM <- wilcoxon_scmappr$OR
signatureVar <- rowVars(HM)
signature_o <- HM[order(signatureVar, decreasing = TRUE),]
signature_top3k <- signature_o[1:3000,]
# Normalized bulk counts
DeconMethod <- compare_deconvolution_methods(as.data.frame(pit_norm), as.data.frame(signature_top3k))
DeconRNAseq <- DeconMethod$cellType_proportions$DeconRNAseq
WGCNA <- DeconMethod$cellType_proportions$WGCNA
DCQ <- DeconMethod$cellType_proportions$DCQ
rownames(DeconRNAseq) <- colnames(pit_norm)
#' ## Compare methods
#' Plot cell proportion figures for each method.
#' Compare estimated cell proportions with "ground truth" proportion calculated from single-cell data.
#+ compare_methods
celltypes <- list(WGCNA = colnames(WGCNA),
DCQ = colnames(DCQ),
DeconRNAseq=colnames(DeconRNAseq))
samples <- list(WGCNA = rownames(WGCNA),
DCQ = rownames(DCQ),
DeconRNAseq=rownames(DeconRNAseq))
# Get 'overlapping' samples and cell-types to be able to compare them.
cellEstimated <- Reduce(intersect,celltypes)
# Reorder to match UMAP order
cellEstimated <- cellEstimated[match(c("Somatotropes", "Lactotropes", "Corticotropes", "Gonadotropes",
"Stem_cell", "Endothelial", "Proliferating", "Melanotropes",
"Pericytes", "Macrophages", "Pituicytes", "Thyrotropes", "Somato_Lacto"), cellEstimated)]
samplesEstimated <- Reduce(intersect,samples)
WGCNA_flt <- WGCNA[samplesEstimated,cellEstimated]
DCQ_flt <- DCQ[samplesEstimated,cellEstimated]
DeconRNAseq_flt <- DeconRNAseq[samplesEstimated,cellEstimated]
estimated_proportions <- list(WGCNA=as.data.frame(WGCNA_flt),
DCQ=as.data.frame(DCQ_flt),
DeconRNAseq=as.data.frame(DeconRNAseq_flt))
gg_def_pal <- hue_pal()(length(cellEstimated))
lighter_cluster_colours <- sapply(gg_def_pal, function(x) lighten(x, amount = 0.5))
cluster_colours <- sapply(gg_def_pal, function(x) darken(x, amount = 0.2))
use_colors <- lapply(1:length(cluster_colours), function(x) c("F" = lighter_cluster_colours[[x]], "M" = cluster_colours[[x]]))
names(use_colors) <- cellEstimated
meta <- pData(pit_utr) %>%
mutate(sample=rownames(pData(pit_utr)),
age = gsub("d", "", age))
melt_props <- lapply(estimated_proportions, function(x) props_melt(x))
prop_plots <- lapply(melt_props, function(decon_method) ggarrange(plotlist = lapply(cellEstimated, function(celltype) get_cell_prop_plot(celltype, decon_method, use_colors))))
names(prop_plots) <- names(estimated_proportions)
lapply(names(prop_plots), function(x) ggsave(paste0("output/ruf_integrate/ruf_integrate_v4_proportion_plots_", x, ".pdf"),
prop_plots[[x]], width = 14 , height = 9, useDingbats = F))
